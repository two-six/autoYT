#! /usr/bin/python

import argparse
import cache
import youtubeinfo as yi
import converter as cvr
import downloader as dlr
import youtubesearchpython as ysp
import threading

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Python script for quickly searching and downloading new content out of YouTube.')
    parser.add_argument('-d', '--download', action="store_true", help="Download saved channels")
    parser.add_argument('-c', '--cap', metavar='N', type=int, help="Limit actions to N items")
    parser.add_argument('-l', '--list', action="store_true", help="List saved channels")
    parser.add_argument('-a', '--add', metavar='CHANNELS', nargs='+', type=str, help="Save channels")
    parser.add_argument('-r', '--remove', metavar="CHANNELS", nargs='+', type=str, help="Remove channels")
    parser.add_argument('-x', '--export', action="store_true", help="Export saved channels")
    parser.add_argument('-s', '--search', type=str, help="Search for YouTube videos")
    parser.add_argument('-S', '--searchchannel', type=str, help="Search for YouTube channel videos")
    parser.add_argument('--removeall', action="store_true", help="Removes all saved channels")
    parser.add_argument('--removeold', action="store_true", help="Removes old saved videos")
    parser.add_argument('--removeallvideos', action="store_true", help="Remove all saved videos")
    parser.add_argument('--new_content', metavar="N", type=int, help="Shows newly downloaded titles from N days")
    args = parser.parse_args()

    if args.list:
        print(cvr.convert_channel_list(cache.list_channels()))
    elif args.add is not None:
        if type(args.add) is not list:
            args.add = [args.remove]
        channels = list(map(yi.find_channel_id, args.add))
        channels = list(map(lambda x: {x: cvr.convert_channel_info(yi.get_channel_info(x))}, channels))
        data = cache.read()
        for channel in channels:
            data = cache.add_channel(data, channel)
        cache.save(data)
    elif args.remove is not None:
        if type(args.remove) is not list:
            args.remove = [args.remove]
        channels = list(map(yi.find_channel_id, args.remove))
        data = cache.read()
        for channel in channels:
            data = cache.remove_channel(data, channel)
        cache.save(data)
    elif args.search is not None:
        limit = 10 if args.cap is None else args.cap 
        videos = yi.find_videos(args.search, limit)
        print(cvr.convert_videos_output(videos))
    elif args.searchchannel is not None:
        limit = 10 if args.cap is None else args.cap
        channel_id = yi.find_channel_id(args.searchchannel)
        videos = yi.find_channel_videos(channel_id, limit)
        print(cvr.convert_channel_videos_output(videos, channel_id, limit))
    elif args.export:
        print(cache.export_saved())
    elif args.removeall:
        cache.remove_all()
    elif args.download:
        threads = list()
        for channel in cache.list_channels()['channels']:
            threads.append(threading.Thread(target=dlr.download_channel, args=(channel, "ba+bv", "./videos")))
        for thread in threads:
            thread.start()
        for thread in threads:
            thread.join()
        # data = vh.add_video(vh.init_history(), "4BlYUBZCCmE", "This is a bathub", "Random Shit")
        # vh.save(data)
        # dlr.download({"url": "https://www.youtube.com/watch?v=4BlYUBZCCmE", "channel": "memy kana≈Ç"}, "ba+wv", "./videos")
    else:
        parser.print_help()
        